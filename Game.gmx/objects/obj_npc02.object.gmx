<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_npc02_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// get stuff from parent
event_inherited();
hp = 40;
damage = 1;
expr = 5;
stop_alarm0 = 0;
radius = 12;
startingx = x;
startingy = y;
move_spd = 20;
xmove = 0;
ymove = 0;
alarm[1] = 10;
able_attack = false;
move_chance = 0.30;
state = scr_mob_move_state;
//for duckling quest only
able_to_be_picked_up = false;
type = -1;

//---define sprites for mob---

//idle sprites
idle_sprites = noone;
idle_sprites[RIGHT] = spr_npc02_idle_right;
idle_sprites[UP] = spr_npc02_idle_up;
idle_sprites[LEFT] = spr_npc02_idle_left;
idle_sprites[DOWN] = spr_npc02_idle_down;

//move sprites
move_sprites = noone;
move_sprites[RIGHT] = spr_npc02_right;
move_sprites[UP] = spr_npc02_up;
move_sprites[LEFT] = spr_npc02_left;
move_sprites[DOWN] = spr_npc02_down;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
script_execute(state);

if(able_to_be_picked_up) {
    if(obj_input.switch_key){
        var switch_items = false;
        if (obj_player_stats.inventory[0].sprite_index != obj_duck.idle_sprites[DOWN] and(
            (place_meeting(x-16, y, obj_player_show) and obj_player_show.sprite_index == obj_player.idle_sprites[RIGHT] and obj_player.state == scr_move_state) or
            (place_meeting(x, y+16, obj_player_show) and obj_player_show.sprite_index == obj_player.idle_sprites[UP] and obj_player.state == scr_move_state) or
            (place_meeting(x+16, y, obj_player_show) and obj_player_show.sprite_index == obj_player.idle_sprites[LEFT] and obj_player.state == scr_move_state) or
            (place_meeting(x, y-16, obj_player_show) and obj_player_show.sprite_index == obj_player.idle_sprites[DOWN] and obj_player.state == scr_move_state))){
            for(var i=0;i&lt;array_length_1d(obj_player_stats.inventory);i++){
                if(obj_player_stats.inventory[i].type == type){
                    if(obj_player_stats.inventory[i].sprite_index!=spr_empty){
                        var artifact = instance_create(x, y, obj_floor_item_parent);
                        artifact.sprite_index = obj_player_stats.inventory[i].display_sprite;
                        artifact.type = obj_player_stats.inventory[i].type;
                    }
                    switch_items = true;
                    for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                        if(obj_item_stats.weapon[j].display_sprite == idle_sprites[DOWN]){
                            obj_player_stats.inventory[i] = obj_item_stats.weapon[j];
                        }
                    }
                    for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                        if(obj_item_stats.item[j].display_sprite == idle_sprites[DOWN]){
                            obj_player_stats.inventory[i] = obj_item_stats.item[j];
                        }
                    }
                    break;
                }
            }
            if(!switch_items){
                for(var i=0;i&lt;array_length_1d(obj_player_stats.inventory);i++){
                    if(obj_player_stats.inventory[i]==obj_item_stats.emptyw){
                        for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                            if(obj_item_stats.weapon[j].display_sprite == idle_sprites[DOWN] and i==0){
                                obj_player_stats.inventory[i] = obj_item_stats.weapon[j];
                                show_debug_message("2-1");
                            }
                        }
                    }else if(obj_player_stats.inventory[i]==obj_item_stats.emptyi){
                        for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                            if(obj_item_stats.item[j].display_sprite == idle_sprites[DOWN]){
                                obj_player_stats.inventory[i] = obj_item_stats.item[j];
                                show_debug_message("2-2 "+string(obj_player_stats.inventory[i])+string(obj_item_stats.item[j]));
                            }
                        }
                        switch_items = true;
                        break;
                    }
                }
            }
            if(!switch_items){
                var artifact = instance_create(x, y, obj_floor_item_parent);
                artifact.sprite_index = obj_player_stats.inventory[obj_player_stats.inventory_select].display_sprite;
                artifact.type = obj_player_stats.inventory[obj_player_stats.inventory_select].type;
                for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                    if(obj_item_stats.weapon[j].display_sprite == idle_sprites[DOWN]){
                        obj_player_stats.inventory[obj_player_stats.inventory_select] = obj_item_stats.weapon[j];
                    }
                }
                for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                    if(obj_item_stats.item[j].display_sprite == idle_sprites[DOWN]){
                        obj_player_stats.inventory[obj_player_stats.inventory_select] = obj_item_stats.item[j];
                    }
                }
            }
            instance_destroy();
            obj_input.switch_key = false;
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-8,-8</point>
    <point>8,-8</point>
    <point>8,8</point>
    <point>-8,8</point>
  </PhysicsShapePoints>
</object>
