<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ladder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .05;
type = 0;
for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
    if(obj_item_stats.item[j].display_sprite == sprite_index){
        type = obj_item_stats.item[j].type;
    }
}
for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
    if(obj_item_stats.weapon[j].display_sprite == sprite_index){
        type = obj_item_stats.weapon[j].type;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_input.switch_key){
    var switch_items = false;
    if (place_meeting(x, y, obj_player_show)){
        for(var i=0;i&lt;array_length_1d(obj_player_stats.inventory);i++){
            if(obj_player_stats.inventory[i].type == type){
                if(obj_player_stats.inventory[i].sprite_index!=spr_empty){
                    var artifact = instance_create(x, y, obj_floor_item_parent);
                    artifact.sprite_index = obj_player_stats.inventory[i].display_sprite;
                    artifact.type = obj_player_stats.inventory[i].type;
                }
                switch_items = true;
                for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                    if(obj_item_stats.weapon[j].display_sprite == sprite_index){
                        obj_player_stats.inventory[i] = obj_item_stats.weapon[j];
                    }
                }
                for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                    if(obj_item_stats.item[j].display_sprite == sprite_index){
                        obj_player_stats.inventory[i] = obj_item_stats.item[j];
                    }
                }
                break;
            }
        }
        if(!switch_items){
            for(var i=0;i&lt;array_length_1d(obj_player_stats.inventory);i++){
                if(obj_player_stats.inventory[i]==obj_item_stats.emptyw){
                    for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                        if(obj_item_stats.weapon[j].display_sprite == sprite_index and i==0){
                            obj_player_stats.inventory[i] = obj_item_stats.weapon[j];
                            show_debug_message("2-1");
                        }
                    }
                }else if(obj_player_stats.inventory[i]==obj_item_stats.emptyi){
                    for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                        if(obj_item_stats.item[j].display_sprite == sprite_index){
                            obj_player_stats.inventory[i] = obj_item_stats.item[j];
                            show_debug_message("2-2 "+string(obj_player_stats.inventory[i])+string(obj_item_stats.item[j]));
                        }
                    }
                    switch_items = true;
                    break;
                }
            }
        }
        if(!switch_items){
            var artifact = instance_create(x, y, obj_floor_item_parent);
            artifact.sprite_index = obj_player_stats.inventory[obj_player_stats.inventory_select].display_sprite;
            artifact.type = obj_player_stats.inventory[obj_player_stats.inventory_select].type;
            for(var j=0;j&lt;array_length_1d(obj_item_stats.weapon);j++){
                if(obj_item_stats.weapon[j].display_sprite == sprite_index){
                    obj_player_stats.inventory[obj_player_stats.inventory_select] = obj_item_stats.weapon[j];
                }
            }
            for(var j=0;j&lt;array_length_1d(obj_item_stats.item);j++){
                if(obj_item_stats.item[j].display_sprite == sprite_index){
                    obj_player_stats.inventory[obj_player_stats.inventory_select] = obj_item_stats.item[j];
                }
            }
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,0</point>
    <point>16,16</point>
    <point>0,16</point>
  </PhysicsShapePoints>
</object>
