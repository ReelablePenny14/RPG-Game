<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
image_speed = 0;
number = -1;
number_length = 0;
type = "";
mouse_over = false;
lines = 0;
startingx = 0;
startingy = 0;
sviewx = 0;
sviewy = 0;
inventory_slot = -1;
tab_num = -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((string_copy(type, 1, 8) == "gui_item" or string_copy(type, 1, 8) == "gui_weap") and string_copy(type, 10, string_length(type)) != "spr_bottom_ui"){
    var scale = display_get_gui_width()/view_wview[0];
    var mouse_over = point_in_rectangle(mouse_x-view_xview[0], mouse_y-view_yview[0], startingx-sviewx, startingy-sviewy, startingx-sviewx+sprite_width/scale, startingy-sviewy+sprite_height/scale)
    if (mouse_over) {
        if (mouse_check_button_pressed(mb_left)) {
            if(obj_control.game_state == PAUSE){
                with(obj_gui_parent){
                    lines = 0;
                }
                lines = scr_draw_item_stats(obj_player_stats.inventory[inventory_slot], inventory_slot);
            }
        }
    }
}
if(inventory_slot!=-1){
    sprite_index = obj_player_stats.inventory[inventory_slot].sprite_index;
}

//--- for pause menu ui ---
//selecting a tab
if(tab_num != -1){
    var mouse_over = false;
    for(var i = 0; i&lt;7; i++){
        mouse_over = point_in_rectangle(mouse_x, mouse_y, x+(i*17)+1, y, x+(i*17)+17, y+18)
        if(mouse_over) {
            if(mouse_check_button_pressed(mb_left)) tab_num = i;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stats and bottom menu

//scale from game size to gui size then draw
var scale = display_get_gui_width()/view_wview[0];
var offsety = (display_get_gui_height()-(display_get_gui_width()/2))/2 + 5;

//draw gui
if(string_copy(type, 1, 8) == "gui_item" or string_copy(type, 1, 8) == "gui_weap"){
    //x = startingx*scale;
    //y = startingy*scale;
    x = (startingx-sviewx)*scale;
    y = (startingy-sviewy)*scale;
    image_xscale = scale;
    image_yscale = scale;
    draw_self();

    //show_debug_message(lines);
    for(var i=0;i&lt;array_height_2d(lines);i++) {
        draw_set_colour(c_black);
        draw_text((310)*scale, (130+(i*10))*scale-offsety, lines[i, 0]);
        draw_text((270)*scale, (130+(i*10))*scale-offsety, lines[i, 1]);

    }
}


if(type == "spr_bottom_ui"){
    //---draw hotbar---
    x = startingx*scale;
    y = startingy*scale;
    image_xscale = scale;
    image_yscale = scale;
    draw_self();
    
    //items and weapons
    draw_sprite_ext(obj_player_stats.inventory[0].sprite_index, 0, (startingx+7)*scale, (startingy+13)*scale, scale, scale, 0, -1, 1);
    draw_sprite_ext(obj_player_stats.inventory[1].sprite_index, 0, (startingx+30)*scale, (startingy+13)*scale, scale, scale, 0, -1, 1);
    draw_sprite_ext(obj_player_stats.inventory[2].sprite_index, 0, (startingx+53)*scale, (startingy+13)*scale, scale, scale, 0, -1, 1);
    draw_sprite_ext(obj_player_stats.inventory[3].sprite_index, 0, (startingx+76)*scale, (startingy+13)*scale, scale, scale, 0, -1, 1);
    draw_sprite_ext(obj_player_stats.inventory[4].sprite_index, 0, (startingx+99)*scale, (startingy+13)*scale, scale, scale, 0, -1, 1);
    
    
    
    
    //---draw health and exp bars---
    var hb_offsetx = x+60+(1*scale);
    var hb_offsety = y-30+(1*scale);
    //hp bar
    draw_set_colour(c_red);
    draw_rectangle(floor(hb_offsetx), floor(hb_offsety), floor(hb_offsetx+(91*scale)), floor(hb_offsety+(4*scale)), 0); 
    if(obj_player_stats.hp/obj_player_stats.maxhp &gt; 0){
        draw_set_colour(c_green);
        draw_rectangle(floor(hb_offsetx), floor(hb_offsety), floor(hb_offsetx+((91*scale)*(obj_player_stats.hp/obj_player_stats.maxhp))), floor(hb_offsety+(4*scale)), 0); 
    }
    //draw_set_colour(c_black);
    //draw_text(x-10+70, y-50, "Health: "+string(obj_player_stats.hp)+"/"+string(obj_player_stats.maxhp));
    
    hb_offsetx = x+60+(1*scale);
    hb_offsety = y-30+(6*scale);
    //exp bar
    draw_set_colour(c_white);
    draw_rectangle(floor(hb_offsetx), floor(hb_offsety), floor(hb_offsetx+(91*scale)), floor(hb_offsety+(1*scale)), 0);
    if(obj_player_stats.expr/obj_player_stats.maxexpr &gt; 0){
        draw_set_colour(c_blue);
        draw_rectangle(floor(hb_offsetx), floor(hb_offsety), floor(hb_offsetx+((91*scale)*(obj_player_stats.expr/obj_player_stats.maxexpr))), floor(hb_offsety+(1*scale)), 0);
    }
    //draw_set_colour(c_white);
    //draw_text(x-10+70, y-20, "Level: "+string(obj_player_stats.level));
    
    hb_offsetx = x+60;
    hb_offsety = y-30;
    //overlay
    draw_sprite_ext(spr_health_bar, 0, hb_offsetx, hb_offsety, scale, scale, 0, -1, 1);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw gui
if(type != "spr_bottom_ui" and number == -1){
    draw_self();
}else if(number != -1){
    draw_self();
    scr_draw_gui();
}

//for pause menu ui
if(tab_num != -1){
    switch(tab_num){
        case 0:
            draw_sprite(spr_tab_selected, 0, x+1, y+1);
            draw_sprite(spr_pause_ui_inventory, 0, x, y);
            draw_sprite(spr_tab_selected, 0, x+9, y+31);
            break;
        case 1:
            draw_sprite(spr_tab_selected, 0, x+1+(17*1), y+1);
            draw_set_colour(c_yellow);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
        case 2:
            draw_sprite(spr_tab_selected, 0, x+1+(17*2), y+1);
            draw_set_colour(c_red);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
        case 3:
            draw_sprite(spr_tab_selected, 0, x+1+(17*3), y+1);
            draw_set_colour(c_blue);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
        case 4:
            draw_sprite(spr_tab_selected, 0, x+1+(17*4), y+1);
            draw_set_colour(c_green);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
        case 5:
            draw_sprite(spr_tab_selected, 0, x+1+(17*5), y+1);
            draw_set_colour(c_purple);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
        case 6:
            draw_sprite(spr_tab_selected, 0, x+1+(17*6), y+1);
            draw_set_colour(c_orange);
            draw_rectangle(x, y+20, x+40, y+40, 0);
            break;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
